Metadata-Version: 2.4
Name: tinytroupe
Version: 0.1.0
Summary: A supply chain simulation framework using TinyTroupe's agent-based capabilities
Author-email: Your Name <your.email@example.com>
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: numpy
Requires-Dist: pandas
Requires-Dist: matplotlib
Requires-Dist: rich
Provides-Extra: dev
Requires-Dist: pytest; extra == "dev"
Requires-Dist: black; extra == "dev"
Requires-Dist: flake8; extra == "dev"

# Supply Chain Resilience Optimization Simulation

This project implements a Monte Carlo simulation framework to evaluate and optimize supply chain resilience in a global manufacturing context. The simulation uses an agent-based approach to model complex interactions between different supply chain actors and assess the impact of various resilience strategies.

## Overview

The simulation models a global supply chain with the following components:

### Agent Types and Roles

1. **Chief Operating Officer (COO)**
   - Strategic decision-making and global oversight
   - Risk assessment and mitigation strategies
   - Performance monitoring and resource allocation

2. **Regional Managers**
   - Local market expertise and operational control
   - Supplier relationship management
   - Regional inventory and logistics optimization

3. **Suppliers**
   - Production capacity and reliability
   - Quality control and standards
   - Lead time management

4. **Logistics Providers**
   - Transportation mode selection
   - Route optimization
   - Delivery scheduling

5. **Production Facilities**
   - Manufacturing capabilities
   - Quality assurance
   - Capacity management

### Order Lifecycle States

1. **NEW**
   - Initial order creation
   - Assignment to regional manager

2. **PRODUCTION**
   - Order in manufacturing phase
   - Quality checks and standards verification

3. **READY_FOR_SHIPPING**
   - Production completed
   - Awaiting logistics assignment

4. **IN_TRANSIT**
   - Order being transported
   - Route and mode tracking

5. **DELIVERED**
   - Successful delivery to destination
   - Performance metrics calculation

6. **CANCELLED**
   - Order termination
   - Root cause analysis

7. **DELAYED**
   - Processing or shipping delays
   - Impact assessment

8. **QUALITY_CHECK_FAILED**
   - Quality standards not met
   - Corrective actions required

## Installation

1. Clone the repository:
```bash
git clone <repository-url>
cd supply-chain-simulation
```

2. Install dependencies:
```bash
pip install -r requirements.txt
```

## Usage

### Running Simulations

1. Basic simulation:
```bash
python supply_chain_sim.py
```

2. Monte Carlo simulation with specific features:
```python
from simulation import run_monte_carlo_simulation, create_simulation_world
from simulation.config import DEFAULT_CONFIG

# Create simulation world
world = create_simulation_world(DEFAULT_CONFIG)

# Run simulation with specific features
results = run_monte_carlo_simulation(
    config=DEFAULT_CONFIG,
    world=world,
    has_supplier_diversification=True,
    has_dynamic_inventory=True,
    has_flexible_transportation=True,
    has_regional_flexibility=True
)
```

### Resilience Strategies

1. **Supplier Diversification**
   - Multiple suppliers per region
   - Risk distribution
   - Capacity flexibility

2. **Dynamic Inventory**
   - Adaptive stock levels
   - Regional buffer optimization
   - Demand-driven adjustments

3. **Flexible Transportation**
   - Multi-modal options
   - Route alternatives
   - Cost-time optimization

4. **Regional Flexibility**
   - Cross-region production
   - Market adaptability
   - Resource reallocation

## Test Artifacts and Analysis

The simulation generates comprehensive test artifacts for analysis:

### 1. Order Lifecycle Data (`*_order_lifecycle.csv`)
```csv
Event Index, Order ID, Event Date, Current Status, Current Location, Production Time, 
Transit Time, Delay Time, Expected Delivery, Actual Delivery, Transportation Mode,
Source Region, Destination Region, Simulation Day, Is Delayed, Is On Time
```

### 2. Agent Interactions (`*_agent_interactions.csv`)
```csv
Interaction ID, Agent ID, Agent Type, Interaction Type, Timestamp, Target Agent,
Order ID, Status, Success, Message, Simulation Day
```

### 3. Simulation Metrics (`*_metrics.csv`)
```csv
Core Metrics
Metric,Mean,Std Dev,Min,Max
resilience_score,0.72,0.12,0.60,0.84
recovery_time,0.49,0.21,0.28,0.70
service_level,0.86,0.06,0.80,0.92
...

Order Status Summary
Status,Count
DELIVERED,45
IN_TRANSIT,12
PRODUCTION,8
NEW,5
```

## Key Metrics

### Core Performance Indicators

1. **Resilience Score** (0.0 - 1.0)
   - Composite metric measuring overall supply chain resilience
   - Weighted average of:
     * Service Level (30%)
     * Risk Exposure Inverse (30%)
     * Flexibility Score (20%)
     * Quality Score (20%)

2. **Recovery Time** (0.0 - 1.0)
   - Speed of disruption recovery
   - Lower values indicate faster recovery
   - Based on:
     * Lead Time
     * Flexibility Score
     * Regional Adaptability

3. **Service Level** (0.0 - 1.0)
   - Order fulfillment performance
   - Calculated from:
     * On-time Delivery Rate
     * Order Completion Rate
     * Quality Compliance

### Risk and Cost Metrics

4. **Risk Exposure** (0.0 - 1.0)
   - Supply chain vulnerability assessment
   - Factors:
     * Supplier Concentration
     * Geographic Distribution
     * Transportation Risk
     * Market Volatility

5. **Cost Efficiency** (0.0 - 1.0)
   - Overall cost performance
   - Components:
     * Inventory Carrying Cost
     * Transportation Cost
     * Production Cost
     * Risk Mitigation Cost

## Monte Carlo Simulation Details

The Monte Carlo simulation runs multiple iterations with varying conditions to:

1. **Evaluate Resilience Strategies**
   - Compare baseline vs. enhanced configurations
   - Measure impact of individual improvements
   - Assess combined strategy effectiveness

2. **Analyze Performance Distribution**
   - Calculate statistical measures
   - Identify performance patterns
   - Assess strategy reliability

3. **Optimize Parameters**
   - Fine-tune configuration settings
   - Balance trade-offs
   - Maximize resilience score

### Configuration Parameters

```python
DEFAULT_CONFIG = {
    'simulation': {
        'monte_carlo_iterations': 100,
        'suppliers_per_region': 3,
        'time_steps': 365,
        'base_demand': 10
    },
    'supplier': {
        'reliability': 0.8,
        'quality_score': 0.9,
        'cost_efficiency': 0.7
    },
    # Additional parameters...
}
```

## Development and Testing

### Running Tests
```bash
# Run all tests
pytest tests/

# Run specific test suite
pytest tests/simulation/test_monte_carlo.py

# Run specific test with artifacts
pytest tests/simulation/test_monte_carlo.py::test_monte_carlo_all_features
```

### Test Artifacts Location
```
test_results/
└── simulation_${ID}/
    ├── all_features_metrics.csv
    ├── all_features_order_lifecycle.csv
    └── all_features_agent_interactions.csv
```

## Contributing

Contributions are welcome! Please follow these steps:
1. Fork the repository
2. Create a feature branch
3. Implement your changes
4. Add or update tests
5. Submit a pull request

## License

This project is licensed under the MIT License - see the LICENSE file for details.
